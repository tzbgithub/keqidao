package ${packageName}.${moduleName}.${businessName}. service.impl;

import java.util.List;
    #if($table.tree)
import java.util.ArrayList;

import com.qidao.framework.web.domain.Ztree;
    #end
    #foreach ($column in $columns)
        #if($column.javaField == 'createTime' || $column.javaField == 'updateTime')
import java.time.LocalDateTime;
        #end
        #if($column.javaField == 'createBy' || $column.javaField == 'updateBy')
import com.qidao.common.utils.security.ShiroUtils;
        #end
    #end
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import ${packageName}.${moduleName}.${businessName}. mapper.${ClassName}Mapper;
import ${packageName}.${moduleName}.${businessName}. domain.${ClassName};
import ${packageName}.${moduleName}.${businessName}. service.I${ClassName}Service;
import com.qidao.common.utils.text.Convert;
import com.qidao.framework.util.SnowflakeIdWorker53;

import javax.annotation.Resource;


/**
 * ${functionName}Service业务层处理
 *
 * @author ${author}
 * @date ${datetime}
 */
@Service
public class ${ClassName}ServiceImpl implements I${ClassName}Service {
    @Autowired
    private ${ClassName}Mapper ${className}Mapper;
    @Resource
    private SnowflakeIdWorker53 snowflakeIdWorker;
    /**
     * 查询${functionName}
     *
     * @param ${pkColumn.javaField} ${functionName}ID
     * @return ${functionName}
     */
    @Override
    public ${ClassName} select${ClassName}ById(${pkColumn.javaType} ${pkColumn.javaField}) {
        return ${className}Mapper.select${ClassName}ById(${pkColumn.javaField});
    }

    /**
     * 查询${functionName}列表
     *
     * @param ${className} ${functionName}
     * @return ${functionName}
     */
    @Override
    public List<${ClassName}> select${ClassName}List(${ClassName} ${className}) {
        return ${className}Mapper.select${ClassName}List(${className});
    }

    /**
     * 新增${functionName}
     *
     * @param ${className} ${functionName}
     * @return 结果
     */
    @Override
    public int insert${ClassName}(${ClassName} ${className}) {
        #foreach ($column in $columns)
            #if($column.javaField == 'createBy')
${className}.setCreateBy(String.valueOf(ShiroUtils.getUserId()));
            #end
        #end
        ${className}.setId(snowflakeIdWorker.nextId());
        return ${className}Mapper.insert${ClassName}(${className});
    }

    /**
     * 修改${functionName}
     *
     * @param ${className} ${functionName}
     * @return 结果
     */
    @Override
    public int update${ClassName}(${ClassName} ${className}) {
        #foreach ($column in $columns)
            #if($column.javaField == 'updateBy')
        ${className}.setUpdateBy(String.valueOf(ShiroUtils.getUserId()));
            #end

        #end
        return ${className}Mapper.update${ClassName}(${className});
    }

    /**
     * 删除${functionName}对象
     *
     * @param ids 需要删除的数据ID
     * @return 结果
     */
    @Override
    public int delete${ClassName}ByIds(String ids) {
        return ${className}Mapper.delete${ClassName}ByIds(Convert.toStrArray(ids));
    }

    /**
     * 删除${functionName}信息
     *
     * @param ${pkColumn.javaField} ${functionName}ID
     * @return 结果
     */
    @Override
    public int delete${ClassName}ById(${pkColumn.javaType} ${pkColumn.javaField}) {
        return ${className}Mapper.delete${ClassName}ById(${pkColumn.javaField});
    }
    #if($table.tree)

        /**
         * 查询${functionName}树列表
         *
         * @return 所有${functionName}信息
         */
        @Override
        public List<Ztree> select${ClassName}Tree() {
            List<${ClassName}> ${className}List = ${className}Mapper.select${ClassName}List(new ${ClassName}());
            List<Ztree> ztrees = new ArrayList<Ztree>();
            for (${ClassName} ${className} :${className}List)
            {
                Ztree ztree = new Ztree();
                #set($TreeCode=$treeCode.substring(0,1).toUpperCase() + ${treeCode.substring(1)})
                #set($TreeParentCode=$treeParentCode.substring(0,1).toUpperCase() + ${treeParentCode.substring(1)})
                #set($TreeName=$treeName.substring(0,1).toUpperCase() + ${treeName.substring(1)})
                ztree.setId(${className}.get${TreeCode}());
                ztree.setpId(${className}.get${TreeParentCode}());
                ztree.setName(${className}.get${TreeName}());
                ztree.setTitle(${className}.get${TreeName}());
                ztrees.add(ztree);
            }
            return ztrees;
        }
    #end



    #foreach ($column in $columns)
        #if($column.javaField == 'delFlag')
            /**
             * 逻辑删除${functionName}对象
             *
             * @param ids 需要删除的数据ID
             * @return 结果
             */
            @Override
            public int logicDelByIds(String ids) {
                return ${className}Mapper.logicDelByIds(Convert.toStrArray(ids));
            }
        #end
    #end

}
